import { useContext, useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router";
import { StyledMarkdown } from "~/components/markdown/styledMarkdown";
import { graphqlRequest } from "~/lib/api";
import { SearchContext } from "~/lib/context";

// Define types for our data based on the API schema
interface Meeting {
	issueId: string;
	session: number;
	nameOfHouse: string;
	nameOfMeeting: string;
	issue: string;
	date: string;
	summary: {
		summary: string;
		model: string;
	} | null;
}

// GraphQL Query (文字列として定義)
const GET_MEETING_DETAILS_QUERY = `
  query GetMeetingDetails($issueId: String!) {
    meetings(issueId: $issueId) {
      issueId
      session
      nameOfHouse
      nameOfMeeting
      issue
      date
      summary {
        summary
        model
      }
    }
  }
`;

export default function SummaryPage() {
	const { issueId } = useParams<{ issueId: string }>();
	const [meeting, setMeeting] = useState<Meeting | null>(null);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState<string | null>(null);
	const navigate = useNavigate();
	const searchContext = useContext(SearchContext);

	useEffect(() => {
		const fetchMeetingDetails = async () => {
			if (!issueId) {
				setLoading(false);
				setError("Issue ID is missing.");
				return;
			}
			setLoading(true);
			setError(null);
			try {
				const data = await graphqlRequest<{ meetings: Meeting[] }>(
					GET_MEETING_DETAILS_QUERY,
					{ issueId },
				);
				setMeeting(
					data.meetings && data.meetings.length > 0 ? data.meetings[0] : null,
				);
			} catch (err: unknown) {
				console.error("Error loading summary:", err);
				if (err instanceof Error) {
					setError(err.message || "Failed to load summary.");
				} else {
					setError("Failed to load summary.");
				}
			} finally {
				setLoading(false);
			}
		};
		fetchMeetingDetails();
	}, [issueId]);

	if (loading) {
		return <div className="p-4">Loading...</div>;
	}

	if (error) {
		return <div className="p-4">Error loading summary: {error}</div>;
	}

	if (!meeting) {
		return <div className="p-4">Meeting not found.</div>;
	}

	const handleBreadcrumbClick = (
		session: number,
		nameOfMeeting: string | null,
		nameOfHouse: string | null,
	) => {
		if (!searchContext || !meeting) return;
		const { setSearchCriteria } = searchContext;
		setSearchCriteria({
			session: session,
			nameOfMeeting: nameOfMeeting,
			nameOfHouse: nameOfHouse ? [nameOfHouse] : [],
		});
		navigate("/");
	};

	return (
		<div className="p-4">
			<nav className="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-4">
				<button
					type="button"
					onClick={() => handleBreadcrumbClick(meeting.session, null, null)}
					className="hover:underline"
				>
					{`第${meeting.session}回`}
				</button>
				<span className="mx-2">&gt;</span>
				<button
					type="button"
					onClick={() =>
						handleBreadcrumbClick(meeting.session, meeting.nameOfMeeting, null)
					}
					className="hover:underline"
				>
					{meeting.nameOfMeeting}
				</button>
				<span className="mx-2">&gt;</span>
				<button
					type="button"
					onClick={() =>
						handleBreadcrumbClick(
							meeting.session,
							meeting.nameOfMeeting,
							meeting.nameOfHouse,
						)
					}
					className="hover:underline"
				>
					{meeting.nameOfHouse}
				</button>
				<span className="mx-2">&gt;</span>
				<span>{meeting.issue}</span>
			</nav>
			<h1 className="text-3xl font-bold">{meeting.nameOfMeeting}</h1>
			<p className="text-lg text-gray-700 dark:text-gray-300">
				{meeting.issue}
			</p>
			<p className="text-md text-gray-500 mb-4 dark:text-gray-400">
				{meeting.nameOfHouse} - {new Date(meeting.date).toLocaleDateString()}
			</p>

			<div className="prose lg:prose-xl max-w-none dark:prose-invert">
				{meeting.summary ? (
					<StyledMarkdown>{meeting.summary.summary}</StyledMarkdown>
				) : (
					<p>No summary available for this meeting.</p>
				)}
			</div>
			{meeting.summary && (
				<p className="text-sm text-gray-500 mt-4 dark:text-gray-400">
					Summary generated by: {meeting.summary.model}
				</p>
			)}
		</div>
	);
}
